{"version":3,"sources":["images/Card2.png","images/Card.jpg","serviceWorker.js","components/CardContainer.js","api/unsplash.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","CardContainer","props","Compare","PicList","ListState","map","el","anim","id","key","specialid","className","img","onClick","SendId","status","src","Card2","alt","Card","axios","create","baseURL","headers","Authorization","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","onSearchSubmit","term","a","unsplash","get","params","query","response","data","setPlay","App","state","Termstate","WrongG","CorrectG","onChange","e","setState","target","value","onSubmit","preventDefault","console","log","list","listFilter","results","urls","regular","won","anotherList","JSON","parse","stringify","forEach","x","NewArr","finalArr","setTimeout","Play","newListState","this","filter","newsListState","type","placeholder","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.dcefa75d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Card2.46d637d4.png\";","module.exports = __webpack_public_path__ + \"static/media/Card.869a023c.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport Card from '../images/Card.jpg'\nimport Card2 from '../images/Card2.png'\nconst CardContainer = (props) => {\n \nconst onClick = (ex) => {\n  \n  this.props.SendId(ex)\n}\nconst Compare = props.Compare\nconst PicList = props.ListState.map(el => {\nlet anim = \"\"\nif(el.id === Compare[0] && Compare[0] === Compare[1]) { anim = \"animated rubberBand\"}\nreturn (\n        <li key={el.specialid} className={`Card ${anim} ${el.img === \"won\" ? ' animated swing' : ''}`}  onClick={() => props.SendId(el.specialid, el.id)}>\n              <div className=\"flip-card\">\n        <div className={ el.status === \"closed\" ? \"transform flip-card-inner\" : \"flip-card-inner\"}>\n          <div className=\"flip-card-front\">\n            <img className=\"imgStyle\" src={el.img === \"won\" ? Card2 : el.img}alt=\"Loading...\" />\n          </div>\n          <div className=\"flip-card-back\">\n            <img className=\"imgStyle\" src={Card} alt=\"Card Background\" />\n          </div>\n        </div>\n      </div>\n        </li>\n     \n    )\n})\n\n  return (\n    <ul className=\"CardContainer\">\n{PicList}\n    </ul>\n  );\n}\n\nexport default CardContainer;","import axios from  'axios';\nexport default axios.create ({\n    baseURL: 'https://api.unsplash.com',\n    headers: {\n        Authorization: 'Client-ID f92ac8f429bf8015e4dc562c80ce08b27f337a2a544c22b3502d5dcfe18b7504'\n    }\n})","import React from 'react';\nimport './App.css'\nimport CardContainer from './components/CardContainer'\nimport unsplash from './api/unsplash'\nimport Image from './images/Card.jpg'\nimport './components/animate.css'\n\nfunction shuffle(array) {\n  var currentIndex = array.length, temporaryValue, randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\nconst onSearchSubmit = async (term) => {\n  const response = await unsplash.get('/search/photos', {\n      \nparams: { query: term }\n})\nreturn response.data\n}\n\nlet setPlay = \"PLAY\"\nclass App extends React.Component {\n\n\n  state = ({\n    Termstate: \"\",\n    ListState: [],\n    Compare: [],\n    WrongG: 0,\n    CorrectG: 0\n\n  })\n\n\nonChange = (e) => {\n  this.setState({Termstate: e.target.value})\n}\nonSubmit = async (e) => {\n  e.preventDefault()\n  console.log(this.state.Termstate)\n  const list =  await onSearchSubmit(this.state.Termstate)\n  let listFilter = list.results.map(el => \n    {return {\n      img: el.urls.regular,\n      specialid: el.id,\n      id: el.id,\n      status: \"open\",\n      won: 0}\n    });\n    console.log(listFilter)\n    let anotherList = JSON.parse(JSON.stringify(listFilter))\n    anotherList.forEach(x => {\n    x.specialid = x.specialid + 1;\n\n    })\n    console.log(anotherList)\n\n\n  const NewArr = [...listFilter, ...anotherList]\nconst finalArr = shuffle(NewArr)\n  this.setState({ListState: finalArr, WrongG: 0, CorrectG: 0, Termstate: \"\"})\n\n  setTimeout(() => {\n    this.Play()\n  }, 3000);\n\n}\n Play = () => {\n  let newListState = JSON.parse(JSON.stringify(this.state.ListState))\n  console.log(newListState)\nnewListState.forEach(x => {x.status=\"closed\"})\nconsole.log(newListState)\nthis.setState({ListState: [...newListState]})\n  \n}\nSendId = (specialid, id) => {\nlet newListState = JSON.parse(JSON.stringify(this.state.ListState))\nconsole.log(newListState)\nnewListState.forEach(x => {if(x.specialid===specialid){x.status=\"open\"}})\nconsole.log(newListState)\nthis.setState({ListState: [...newListState], Compare: [...this.state.Compare, id]})\n\n}\n\n\ncomponentDidUpdate(){\n  if(this.state.Compare.length === 2){\n    setTimeout(() => {\nif(this.state.Compare[0] === this.state.Compare[1]){\n  let newListState = JSON.parse(JSON.stringify(this.state.ListState))\n  console.log(newListState)\nnewListState.forEach(x => {if(x.id===this.state.Compare[0]){x.won=1}})\nconsole.log(newListState)\nthis.setState({ListState: [...newListState], Compare: [], CorrectG: this.state.CorrectG + 1})\nif(this.state.ListState.filter(x => x.won === 1).length === 20){\n  let newsListState = JSON.parse(JSON.stringify(this.state.ListState))\n  console.log(newListState)\nnewsListState.forEach(x => {x.img = \"won\"})\nconsole.log(newsListState)\nthis.setState({ListState: [...newsListState], Compare: []})\n\n}\n}\nif(this.state.Compare[0] !== this.state.Compare[1]){\n  let newListState = JSON.parse(JSON.stringify(this.state.ListState))\n  console.log(newListState)\nnewListState.forEach(x => {if(x.won === 0){x.status = \"closed\"}})\nconsole.log(newListState)\nthis.setState({ListState: [...newListState], Compare: [], WrongG: this.state.WrongG + 1})\n\n}\nelse {}\n}, 800);\n\nsetPlay = \"REPLAY\"\n}\n}\nrender(){\n  \n  return (\n    <div className=\"Main\">\n    <div className=\"App\">\n      <div className=\"leftSide\">\n    <p>Wrong Steps:<span className=\"score red\">{this.state.WrongG}</span></p>\n    <p>Correct Steps:<span className=\"score green\">{this.state.CorrectG}</span></p>\n      </div>\n      <form onSubmit={this.onSubmit}>\n        < input type=\"text\" className=\"input\" value={this.state.Termstate} onChange={this.onChange} placeholder=\"Type in a keyword to search for pictures and press play/replay\" />\n        < input  className=\"input2\"type=\"submit\" value={setPlay} />\n      </form>\n      {/* <div className=\"rightSide\">\n      <p>Wrong Steps:<span>{this.state.WrongG}</span></p>\n    <p>Correct Steps:<span>{this.state.CorrectG}</span></p>\n      </div> */}\n      </div>\n      <div className='BigBorder'><div className=\"SmallBorder\"></div></div>\n  <CardContainer SendId={this.SendId} Compare={this.state.Compare} ListState={ this.state.ListState } />\n      <div className='BigBorder'><div className=\"SmallBorder\"></div></div>\n    </div>\n  )}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}